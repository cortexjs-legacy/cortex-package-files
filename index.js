'use strict';

module.exports = pf;

var glob = require('glob');
var ignore = require('ignore');

var SUPPORTED_DIRECTORIES = [
  'src'
];

// Get the file list to be packaged
// @param {Object} options
// - cwd: {path}
// - pkg: {Object} package object
// - more: {Boolean} include special files according to package data
function pf (options, callback) {
  var cwd = options.cwd;

  // copy filtered files to the temp dir
  glob('**', {
    cwd: cwd,
    // include .dot files
    dot: true,
    // Adds a `/` character to directory matches 
    mark: true

  }, function(err, files) {
    if (err) {
      return callback(err);
    }

    var pkg = options.pkg;
    var filter = package_files._create_filter(pkg);

    var REGEX_ENDS_BACKSLASH = /\/$/;
    files = files
      // Filter dirs
      .filter(function (file) {
        return !REGEX_ENDS_BACKSLASH.test(file);
      })
      .filter(filter);

    callback(null, files);
  });
};

pf._create_filter = function (pkg, more) {
  var ignore_rules = pkg.ignores || [];

  var ig = ignore()
    .addIgnoreFile(
      ignore.select([
        '.cortexignore',
        '.gitignore'
      ])
    )
    .addPattern(ignore_rules);

  if (more) {
    ig
      // Which is needed by cortex,
      // or there will be errors if install
      .addPattern(pf._directories_pattern(pkg))
      .addPattern(pf._css_pattern(pkg));
  }

  ig.addPattern([
    // Always ignored
    'neurons/',
    // cortexjs/cortex#297: by default, we will ignore 'node_modules' directory
    'node_modules/',

    // You could never ignore this.
    '!cortex.json',
    '!cortex-shrinkwrap.json',
    '!README.*'
  ]);

  return ig.createFilter();
};


pf._directories_pattern = function (pkg) {
  var directories = pkg.directories || {};

  // cortexjs/cortex#270: package.directories should not be ignored, even it appears in .gitignore.
  // There are files which generated by `scripts.prebuild` or `scripts.prepublish`,
  // and developers might adds them into .gitignore,
  // but cortex needs them.
  var include_directories = 
    Object.keys(directories)
    .map(function(key) {
      if (!~SUPPORTED_DIRECTORIES.indexOf(key)) {
        return;
      }
      // Make sure the path pattern consisted with the glob result.
      var dir = node_path.join('.', directories[key]);
      var ignore_negative = '!' + dir.replace(/\/$/, '') + '/*';
      return ignore_negative;
    })
    .filter(Boolean);

  return include_directories;
};


pf._css_pattern = function (ig, pkg) {
  var include_css = pkg.css
    ? include_css.map(function (css) {
        // './abc.css' -> 'abc.css'
        return node_path.join('.', css);
      })
    : [];

  return include_css;
};
